extends layout

block content
    style.
        .grid-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(500px, 1fr));
            grid-gap: 50px;
            object-fit: cover;
            padding: 10px;
        }
        .grid-container>a:hover {
            color: cadetblue;
            text-decoration: none;
        }
        .grid-item {
        background-color: rgba(0,0,0,.8);
        border: 1px solid rgba(255, 255, 255, 0.8);
            padding: 10px;
            font-size: 20px;
            text-align: center;
            color: white;
        }
    #hello
    script.
        class TweetComponent extends React.Component {
            constructor(props) {
                super(props);
                this.state = Object.assign({}, { tweets: props.tweets });
            }
            componentDidMount() {
                this.fetchAll();
            }
            fetchAll() {
                fetch('./tweets')
                .then(res => res.json())
                .then(tweets => this.setState({ tweets: tweets }));
            }
            updateSearchByTag(event) {
                tag = this.refs.searchbyTag.value;
                fetch('./tweetTag/'+tag)
                .then(res => res.json())
                .then(tweets => this.setState({ tweets: tweets }));
            }
            updateSearchByName(event) {
                name = this.refs.searchbyName.value;
                fetch('./tweetName/'+name)
                .then(res => res.json())
                .then(tweets => this.setState({ tweets: tweets }));
            }
            updateSearchByAll(event) {
                this.fetchAll();
            }
            addTweet(event) {
                event.preventDefault();
                var data = { depC: this.refs.tweetCreator.value, dept: this.refs.tweetTag.value };
                //this.setState({tweets: this.state.tweets.concat(data)})
                this.refs.tweetCreator.value = '';
                this.refs.tweetTag.value = '';
                this.postTweet(data);
            }
            postTweet(data) {
                fetch('./addTweet', {method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify(data) })
                .then(res => res.json())
                .then(newTweet => {this.setState({tweets: this.state.tweets.concat(newTweet)})});
            }
            deleteTweet(event,tweetId) {
                console.log(event,tweetId);
                event.preventDefault();
                fetch('./deleteTweet', {method: 'POST',headers:{'Content-Type': 'application/json'},body: tweetId })
                .then(res => res.json())
                .then(confirm => {
                    if (confirm) {
                        this.setState({tweets: this.state.tweets.filter(e => e._id !== tweetId)})
                        }
                    });
            }
            render() {
                return (
                    React.createElement("div", { className: 'container' },
                        React.createElement("div", { className: 'jumbotron' },
                            React.createElement("input", { className: '', placeholder: 'Search by Tag',ref:'searchbyTag' }),
                            React.createElement("button", { className: 'btn', onClick: this.updateSearchByTag.bind(this) },"Search"),
                            React.createElement("input", { className: '', placeholder: 'Search by Name',ref:'searchbyName' }),
                            React.createElement("button", { className: 'btn', onClick: this.updateSearchByName.bind(this) },"Search"),
                            React.createElement("form", { onSubmit: this.addTweet.bind(this) },
                                React.createElement("input", { type: 'text', ref: 'tweetCreator', required: true, placeholder: 'Enter Name' }),
                                React.createElement("input", { type: 'text', ref: 'tweetTag', required: true, placeholder: 'Enter Tag' }),
                                React.createElement("button", { type: 'submit' }, "Post"),
                            ),
                        ),
                        React.createElement("div", { className: 'grid-container' },
                            React.createElement("button", { className: 'btn', onClick: this.updateSearchByAll.bind(this) },"Search"),
                            this.state.tweets.map((tweet) => {
                                return (
                                    React.createElement("div",{key:tweet._id,className:'grid-item'},
                                        React.createElement("h2", {}, tweet.tweetCreator ),
                                        React.createElement("h4", {}, tweet.tweetTag ),
                                        React.createElement("button", { className: 'btn', onClick: this.deleteTweet.bind(this,tweet._id) },"Delete"),
                                    )
                                )
                            })
                        )
                    )
                )   
            }
        }
        const tweets = [{_id:1,tweetCreator:"hello1",tweetTag:"heroku"},{_id:2,tweetCreator:"hello2",tweetTag:"dataJson"}]
        ReactDOM.render(
            React.createElement(TweetComponent, { tweets: tweets }),
            document.getElementById("hello")
        );
